import streamlit as st
import pandas as pd
import plotly.express as px
from streamlit_folium import st_folium
import folium
import os
import sys
from datetime import datetime

# –î–æ–±–∞–≤–∏—Ç—å –ø—É—Ç—å –∫ app/ –Ω–∞–ø—Ä—è–º—É—é
current_dir = os.path.dirname(os.path.abspath(__file__))
app_dir = os.path.abspath(os.path.join(current_dir, "..", "app"))
if app_dir not in sys.path:
    sys.path.insert(0, app_dir)

# –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é
from input_handler import parse_input
from search_engine import search
from matcher import match_ratio, classify_match
from analyzer import analyze_sentiment, extract_country
from exporter import export_csv, export_pdf
from utils import filter_results, find_original


st.set_page_config(page_title="News Spread Monitor", layout="wide")
st.title("üõ∞ –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ")

engine = st.selectbox("üîç –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤–∏–∫", ["serpapi", "gnews", "contextualweb"])
api_key = st.text_input("üîë API-–∫–ª—é—á")
host = ""
if engine == "contextualweb":
    host = st.text_input("üõ† ContextualWeb Host", value="contextualwebsearch-websearch-v1.p.rapidapi.com")

user_input = st.text_area("üìù –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É, –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–±—ã—Ç–∏—è")

if st.button("üëÅ –î–µ–º–æ-–∞–Ω–∞–ª–∏–∑"):
    user_input = "OpenAI launches new AI model"

if st.button("üöÄ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å") and user_input and api_key:
    with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º..."):
        text, url = parse_input(user_input)
        results = search(text, api_key, engine=engine, host=host)
        results = filter_results(results)

        rows = []
        for r in results:
            snippet = r.get("snippet", "")
            link = r.get("link") or r.get("url")
            ratio = match_ratio(text, snippet)
            match_type = classify_match(ratio)
            sentiment = analyze_sentiment(snippet)
            country = extract_country(link or "")
            rows.append({
                "URL": link,
                "Title": r.get("title", ""),
                "MatchType": match_type,
                "Similarity": ratio,
                "Sentiment": sentiment,
                "Country": country,
                "Date": r.get("published"),
            })

        if not rows:
            st.warning("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ API –∫–ª—é—á.")
            st.stop()

        df = pd.DataFrame(rows)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å —Ç–∞–π–º—Å—Ç–µ–º–ø–æ–º
        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M")
        export_csv(rows, f"results_{timestamp}.csv")
        export_pdf(rows, f"results_{timestamp}.pdf")

        st.success(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(rows)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª—ã results_{timestamp}.csv –∏ .pdf")
        st.dataframe(df)

        fig_type = px.pie(df, names="MatchType", title="üß¨ –¢–∏–ø—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
        st.plotly_chart(fig_type)

        if df["Country"].notnull().any():
            fig_country = px.bar(df, x="Country", title="üåç –ì–µ–æ–≥—Ä–∞—Ñ–∏—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è")
            st.plotly_chart(fig_country)

        if df["Date"].notnull().any():
            fig_time = px.histogram(df, x="Date", nbins=20, title="üïí –•—Ä–æ–Ω–æ–ª–æ–≥–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π")
            st.plotly_chart(fig_time)

        if df["Country"].notnull().any():
            m = folium.Map(location=[20, 0], zoom_start=2)
            country_counts = df["Country"].value_counts()
            for country, count in country_counts.items():
                folium.CircleMarker(
                    location=[0, 0],  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å—Ç—Ä–∞–Ω—ã –≤ –±—É–¥—É—â–µ–º
                    radius=5 + count,
                    popup=country,
                ).add_to(m)
            st_folium(m, width=700, height=450)
